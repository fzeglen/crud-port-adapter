
remit:
  kafka:
    brokers: localhost:9093
    schema-registry: http://localhost:8085

spring:
  kafka:
    bootstrap-servers: ${remit.kafka.brokers}
    properties:
      value.subject.name.strategy: io.confluent.kafka.serializers.subject.RecordNameStrategy
      schema.registry.url: ${remit.kafka.schema-registry}
      specific.avro.reader: true
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer

  cloud:
    stream:
      bindings:
        input:
          destination: payment-session
          consumer:
            useNativeDecoding: true
        output:
          destination: payment-session
          producer:
            useNativeEncoding: true
        ktable:
          destination: payment-session
          producer:
            useNativeEncoding: true
      kafka:
        streams:
          bindings:
            ktable:
              consumer:
                materializedAs: payment-session-storage-db
          binder:
            brokers: ${remit.kafka.brokers}
            configuration:
             default.key.serde: org.apache.kafka.common.serialization.Serdes$StringSerde
             default.value.serde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
             commit.interval.ms: 1000
             schema.registry.url: ${remit.kafka.schema-registry}

        binder:
          brokers: ${remit.kafka.brokers}
          producer-properties:
            schema.registry.url: ${remit.kafka.schema-registry}
            key.serializer: org.apache.kafka.common.serialization.StringSerializer
            value.serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
            value.subject.name.strategy: io.confluent.kafka.serializers.subject.RecordNameStrategy
          consumer-properties:
            schema.registry.url: ${remit.kafka.schema-registry}
            key.deserializer: org.apache.kafka.common.serialization.StringDeserializer
            value.deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer